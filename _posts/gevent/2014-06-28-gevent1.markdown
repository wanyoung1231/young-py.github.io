---
layout: post
title:  "gevent 学习笔记 —— greenlet"
date:   2014-06-28 16:48:45
categories: gevent
author: young
---

![](http://young-py.github.io/imgs/yyzt2.jpg)

gevent文档：that uses greenlet to provide a high-level synchronous API.

意思是：使用**greenlet**来提供**高级同步API**。

那greenlet又是怎样一种机制呢？这个后面会稍微简单的讲一下原理，不过在后续的几篇会着重分析它的源码。在开始之前先看看提到的几个关键字『高级』、『同步』，高级不高级暂时还不知道，毕竟在实际生产环境中才看得到效果。而同步这个概念，不知道大家理解深不深刻，总之我当初理解不是很深刻，所以遇到了就聊聊呗！

-----

### **同步**

不明白为什么会叫同步，总是让我有一种错觉，让我联想到的第一个词汇就是同时进行。不知道大家是不是和我一样，至少我看到同步是不会去想到它的正确意思。我曾一度怀疑是不是翻译错了，但是在质疑别人错之前，应该先质疑一下自己。所以我开始怀疑我的语文没学好，然后我去查了一下汉语词典，结果就悲剧了，我已经开始怀疑我的人生了。 %>_<%

同步：指两个或两个以上随时间变化的量在变化过程中保持一定的相对关系。

>《光明日报》1984.6.2：“城市改革的步子要加快，要从解决国家与企业、企业与职工的关系入手，把适合于当前情况的各项改革措施初步配起套来，同步进行。

从上面引用的话应该可以看出，国家与企业、企业与职工，都是两个相对的关系，有着各自的利益。但是他们必须合作才能完成一个共同目标，例如买票看电影。这个场景有两个动作需要完成，一个出票、一个买票，只有出票才能买票，并且这个买票的人还只能傻等，不能做其他事。

同步真心不是同时进行，所以还是要多读书啊！尤其是语文！

-----

### **Greenlet**

还记得在<a style="border-bottom: 2px solid #ecf0f1;" href="http://blog.segmentfault.com/young_ipython/1190000000534263">协程篇</a>中学习的吗？花了较长篇幅讲协程及从其子例程演变的过程。而greenlet就是python中实现Coroutine「协程」的一个基础库。前面我们了解了协程的相关概念及思想，但我们还不知道它在底层是怎样实现的。只知道它有个特别的地方，就是能够和进程、线程一样保存上下文，那协程的上下文是怎样保存的呢？

-----

### **源码初探**

{% highlight c %}

typedef struct _greenlet {
    PyObject_HEAD
    char* stack_start;
    char* stack_stop;
    char* stack_copy;
    intptr_t stack_saved;
    struct _greenlet* stack_prev;
    struct _greenlet* parent;
    PyObject* run_info;
    struct _frame* top_frame;
    int recursion_depth;
    PyObject* weakreflist;
    PyObject* exc_type;
    PyObject* exc_value;
    PyObject* exc_traceback;
    PyObject* dict;
} PyGreenlet;

{% endhighlight %}

上面给出的是greenlet的结构体定义，有兴趣的可以去下一份源代码看看，里面也有很好的解释。

这里我们主要了解一下关于堆栈的几个操作，从命名规则就可以找到我们想要的东西，就是它们了：`stack_start`、`stack_stop`、`stack_copy`、`stack_saved`。

其实仔细想想，你会发现非常的简单。假设有『函数A』和『函数B』，『函数A』进栈执行到一半的时候需要调用『函数B』，没事我们可以将『函数B』进栈(图stack-01)。好了『函数B』现在又想调用『函数A』了，怎么办？

<img style="width:180px; height:205px;" src="http://0.0.0.0:4000/imgs/gevent2-03.png">










