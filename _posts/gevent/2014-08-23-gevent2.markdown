---
layout: post
title:  "gevent 学习笔记 —— greenlet源码剖析1"
date:   2014-06-28 16:48:45
categories: gevent
author: young
---
![](http://young-py.github.io/imgs/yyzt3.jpg)

在<a style="border-bottom: 2px solid #ecf0f1;" href="http://blog.segmentfault.com/young_ipython/1190000000626309">greenlet篇</a>中只是简单讲述了一下greenlet原理，不知道有没有人对源码感兴趣的，不过我还是比较感兴趣的。对于技术我一直都觉得『
知其然，然后知其所以然』才是最好的，不希望自己只停留在知道用，而不知道为什么这样用，更不希望当别人问起原理的时候回答：“我也不知道，我只知道这样用”。

一篇可能介绍不完，所以可能需要分几部分来介绍。当我写到这的时候突然发现自己是不是写跑题了，本来是写greenlet源码分析的，结果变成了怎么去写Python扩展了。不过不管怎样，就当多学习了一些其他知识，况且分析源码肯定少不了对这些知识的了解。

-----

### **模块初始化**

greenlet是用C编写的一个扩展模块，即用Python去调用C程序。像下面这段代码，内部都是怎样的一个过程呢？

{% highlight python %}
from greenlet import greenlet

def test1():
    print 12
    gr2.switch()
    print 34

def test2():
    print 56
    gr1.switch()
    print 78

gr1 = greenlet(test1)
gr2 = greenlet(test2)
gr1.switch()
{% endhighlight %}

这段代码中，我们看到`from greenlet import greenlet`这句，相信都能明白是导入了一个模块。为什么要导入这个模块呢？这个问题有点瞧不起大家了，因为我们可能需要使用这个模块的某个功能。那在导入这个模块的时候，Python解释器需要做哪些工作呢？在使用一个类的时候，我们肯定是需要调用构造函数来初始化的，导入模块就类似于这样的一个初始化过程。所以肯定会有一个初始化函数，它长啥样？

在文档中有这样一句：The initialization function must be named `initname()`, where _name_ is the name of the module, and should be the only non-static item defined in the module file。

-----

所以对于greenlet，我们就能找到`initgreenlet(void)`函数。

{% highlight c %}
#define INITERROR return
// 第一次导入greenlet模块时调用
PyMODINIT_FUNC initgreenlet(void) 
{
    PyObject* m = NULL;
    char** p = NULL;
    PyObject *c_api_object;
    static void *_PyGreenlet_API[PyGreenlet_API_pointers];

    GREENLET_NOINLINE_INIT();

    m = Py_InitModule("greenlet", GreenMethods);

    if (m == NULL)
    {
        INITERROR;
    }
    ...
}
{% endhighlight %}

首先根据模块名查找相应的初始化函数，然后`Py_InitModule()`函数向Python解释器注册该模块中所有可以用到的方法。而`Py_InitModule()`函数是由Python提供的C API，对于使用C API只需要包含一个头文件就可以了。

官方文档描述：All function, type and macro definitions needed to use the Python/C API are included in your code by the following line:

{% highlight c %}
#include "Python.h"
{% endhighlight %}

### **方法列表**

当Python程序第一次导入greenlet模块的时候，`initgreenlet()`会被调用。它将调用`Py_InitModule()`创建一个“模块对象”（它将被插入到`sys.modules`字典下的“greenlet”键下），并且将插入方法列表（PyMethodDef结构数组）构成的内建函数对象作为它的第二个参数传到最新被创建的模块种。`Py_InitModule()`返回一个指向它创建的模块对象的指针。方法列表代码：

{% highlight c %}
static PyMethodDef GreenMethods[] = {
    {"getcurrent", (PyCFunction)mod_getcurrent, METH_NOARGS, /*XXX*/ NULL},
#if GREENLET_USE_TRACING
    {"settrace", (PyCFunction)mod_settrace, METH_VARARGS, NULL},
    {"gettrace", (PyCFunction)mod_gettrace, METH_NOARGS, NULL},
#endif
    {NULL,     NULL}        /* Sentinel */
};
{% endhighlight %}

仔细看下方法列表中的每项，它都是由四个部分组成：方法名、导出函数、参数传递方式和方法描述。
方法名：从Python解释器中调用该方法时所使用的名字。

参数传递方式：则规定了Python向C函数传递参数的具体形式，可选的两种方式是METH_VARARGS和METH_KEYWORDS，其中METH_VARARGS是参数传递的标准形式，它通过Python的元组在Python解释器和C函数之间传递参数，若采用METH_KEYWORD方式，则Python解释器和C函数之间将通过Python的字典类型在两者之间进行参数传递。

### **导出函数**



讲到这，一个模块的初始化工作基本就完成了。不过发现一个问题，模块初始化的时候只提供了`getcurrent`方法使用，其他的像`switch`、`run`怎么没有看到？具体的这些就放到下一篇再讲了！









