---
layout: post
title:  "Flask教程 —— 用户身份验证（上）"
date:   2014-12-24 19:46:35
categories: flask
author: young
---

大部分的应用程序需要知道用户谁。当用户连接到应用程序，它会对用户进行身份验证。一旦应用程序知道谁是用户，它可以提供定制的体验。

大部分常用的身份验证方法需要用户提供身份标识（邮箱或用户名）和密码。在这一章节，会为Flasky创建一个完整的身份验证系统。

### **1、Flask的身份验证扩展**

事实上有许多非常不错的Python身份验证包，但没有一个能做完所有工作。在这章中使用的用户身份验证解决方案使用几个包并提供“粘合剂”使得它们能够很好的协调工作。下面是一些需要用到的包：

* Flask-Login：登录用户的用户会话管理

* Werkzeug：密码哈希和验证

* itsdangerous：密钥安全令牌生成和验证

除了指定身份验证包，下面是一些通用的扩展包：

* Flask-Mail：发送身份验证相关的邮件

* Flask-Bootstrap：HTML模板

* Flask-WTF：Web表单

### **2、密码安全**

在设计web应用程序的过程中，存储在数据库中的用户信息的安全经常被忽略。如果攻击者能够攻入你的服务器并且访问你的用户数据库，你的用户安全就存在风险，且风险比你想象的还要大。大多数的用户会在多个网站中使用相同的密码是已知的事实，所以即使你不存储任何敏感信息，访问存储在你的数据库中的密码可以让攻击者访问你的用户在其他网站的账户。

安全存储用户密码到数据库的关键主要是不要存储明文密码，而是密码的哈希值。密码哈希函数将密码作为输入并生成一个或多个密钥转换。结果是一个和原始密码不相似的新的字符串序列。密码哈希值可以替代真实密码验证，因为哈希函数是可复验的：给相同的输入，结果就一直一样。

>注：密码哈希过程是一个复杂的任务，且难以得到正确的值。所以推荐你不要自己去实现解决方案，而是使用社区提供的可信库来替代之。如果你对生成安全密码哈希感兴趣，文章《Salted Password Hashing - Doing it Right》值得一读。

##### **2.1、Wekzeug散列密码**

Werkzeug的**security**模块很方便的实现了安全密码散列过程。这个功能有两个函数提供，各自用于注册和验证解释：

* `generate_password_hash(password, method=pbkdf2:sha1, salt_length=8)`：

这个函数携带未加密密码并将密码散列为字符串返回，可以保存在用户的数据库中。对于大多数用例，默认的`method`值和`salt_length`就已经足够了。

* `check_password_hash(hash, password)`：

这个函数携带从数据库中取回的密码散列值和用户输入的密码。如果指示密码正确则返回`True`。

示例8-1展示了在第五章节中创建的`User`模型的变化，容纳了密码散列的过程。

_示例8-1. app/models.py：在User模型中散列密码_

{% highlight python %}

from werkzeug.security import generate_password_hash, check_password_hash

class User(db.Model): 
    # ...
    password_hash = db.Column(db.String(128))

    @property
    def password(self):
        raise AttributeError('password is not a readable attribute')
    
    @password.setter
    def password(self, password):
        self.password_hash = generate_password_hash(password)

    def verify_password(self, password):
        return check_password_hash(self.password_hash, password)

{% endhighlight %}

密码散列函数是通过一个只读属性`password`来实现的。当这个属性被设置，`setter`方法会调用Werkzeug的`generate_password_hash()`函数并将结果写入到`password_hash`字段。企图读取`password`属性将返回错误，





