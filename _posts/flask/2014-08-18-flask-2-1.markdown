---
layout: post
title:  "Flask教程 —— 基本应用程序结构（上）"
date:   2014-08-18 17:26:38
categories: flask
author: young
---

### **1、初始化**

在这章，你将学到Flask应用程序的不同部分。同时，你将编写和运行你的第一个Flask web应用程序。

所有的Flask应用程序都必须创建一个_应用程序实例_。使用web服务器网关接口协议将所有从客户端接收的请求传递给这个对象处理。这个应用程序实例就是**Flask**类的一个对象，通常使用下面的方式创建：
    
{% highlight python %}

from flask import Flask
app = Flask(__name__)

{% endhighlight %}

Flask类构造函数唯一需要的参数就是应用程序的主模块或包。对于大多数应用程序，Python的`__name__`变量就是那个正确的、你需要传递的值。

>注：对于Flask开发者来说，传给Flask应用程序构造函数的`name`参数是比较容易弄混淆的。Flask使用这个参数来确定应用程序的根目录，这样以后可以相对这个路径来找到资源文件。

稍后你可以看到更复杂的应用程序实例初始化，但是对于简单应用程序这些已经足够了。

### **2、路由和视图函数**

客户端例如web浏览器发送_请求_给web服务，进而将它们发送给Flask应用程序实例。应用程序实例需要知道对于各个URL请求需要运行哪些代码，所以它给Python函数建立了一个URLs映射。这些在URL和函数之间建立联系的操作被称之为_路由_。

在Flask应程序中定义路由的最便捷的方式是通过显示定义在应用程序实例之上的`app.route`装饰器，注册被装饰的函数来作为一个路由。下面的例子会演示怎样使用装饰器来申明一个路由：

{% highlight python %}

@app.route('/')
def index():
    return '<h1>Hello World!</h1>'

{% endhighlight %}

>注：装饰器是Python语言的标准特性；它们可以以不同方式改变函数的行为。一个常见的模式是使用装饰器来注册函数作为一个事件处理程序。

在上一个示例给应用程序的根URL注册`index()`函数作为事件的处理程序。如果这个应用程序被部署在服务器上并绑定了__www.example.com__域名，然后在你的浏览器地址栏中输入__http://www.example.com__将触发`index()`来运行服务。客户端接收到的这个函数的返回值被称为__响应__。如果客户端是web浏览器，响应则是显示给用户的文档。

类似于`index()`的函数被称作__视图函数__。通过视图返回的响应可以是简单的HTML内容的字符串，但它也可以市更复杂的形式，正如您将看到的。

>注：响应字符串嵌入在Python代码中





























